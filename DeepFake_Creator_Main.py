# -*- coding: utf-8 -*-
"""DeepFake-Creator.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I7pIYVFcO2bJEHR_0l5oX4Hb_HMD6Kej

# Before running the notebook you require a runtime hardware of a GPU
# goto Runtime in the toolbar and select change runtime type
# under the hardware accelarator select GPU and save.

# Cloning the GitHub Repository
clone the following repository using the git clone command

https://github.com/a-a-ahmed/DeepFake-Creator.git
"""

!pip install PyYAML==5.3.1
!git clone https://github.com/a-a-ahmed/DeepFake-Creator.git

"""Changing the directory to the cloned one using the command cd (directory_name)"""

cd DeepFake-Creator/

"""# Importing the required libraries

load the Source Image and the Driving Video
"""

import imageio
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from skimage.transform import resize
from IPython.display import HTML
import warnings
warnings.filterwarnings("ignore")

source_image = imageio.imread('/content/drive/My Drive/DeepFake-Creator/InputPic.png')
driving_video = imageio.mimread('/content/drive/My Drive/DeepFake-Creator/SampleVDO.mp4')


#Resize image and video to 256x256

source_image = resize(source_image, (256, 256))[..., :3]
driving_video = [resize(frame, (256, 256))[..., :3] for frame in driving_video]

def display(source, driving, generated=None):
    fig = plt.figure(figsize=(8 + 4 * (generated is not None), 6))

    ims = []
    for i in range(len(driving)):
        cols = [source]
        cols.append(driving[i])
        if generated is not None:
            cols.append(generated[i])
        im = plt.imshow(np.concatenate(cols, axis=1), animated=True)
        plt.axis('off')
        ims.append([im])

    ani = animation.ArtistAnimation(fig, ims, interval=50, repeat_delay=1000)
    plt.close()
    return ani
    

HTML(display(source_image, driving_video).to_html5_video())

"""Creating a deep fake model and loading checkpoints"""

from DeepFake_Creator import load_checkpoints
generator, kp_detector = load_checkpoints(config_path='config/vox-256.yaml', 
                            checkpoint_path='/content/drive/My Drive/DeepFake-Creator/vox-adv-cpk.pth.tar')

"""animating the image and storing it in predictions variable
displaying the source image, driving video and the predictions in one fro=ame using HTML(display().to_html5_video)
"""

from DeepFake_Creator import make_animation
from skimage import img_as_ubyte

predictions = make_animation(source_image, driving_video, generator, kp_detector, relative=True)

#save resulting video
imageio.mimsave('../generated.mp4', [img_as_ubyte(frame) for frame in predictions])
#video can be downloaded from /content folder

HTML(display(source_image, driving_video, predictions).to_html5_video())